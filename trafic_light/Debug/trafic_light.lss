
trafic_light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000021c  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  000002b2  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00000a08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006b4  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000274  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000058e  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  000019a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001ac  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000107  00000000  00000000  00001c14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  8a:	0c 94 0c 01 	jmp	0x218	; 0x218 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <seven_seg_init>:
#define E 5
#define F 6
#define G 7

void seven_seg_init(){
	DDRA |= 0xfe;
  92:	8a b3       	in	r24, 0x1a	; 26
  94:	8e 6f       	ori	r24, 0xFE	; 254
  96:	8a bb       	out	0x1a, r24	; 26
	SETBIT(DDRC,6);
  98:	a6 9a       	sbi	0x14, 6	; 20
	SETBIT(DDRC,7);
  9a:	a7 9a       	sbi	0x14, 7	; 20
}
  9c:	08 95       	ret

0000009e <convert_digit>:
void convert_digit(uint8_t digit){
 PORTA &=0b00000001;
  9e:	9b b3       	in	r25, 0x1b	; 27
  a0:	91 70       	andi	r25, 0x01	; 1
  a2:	9b bb       	out	0x1b, r25	; 27
 switch(digit){
  a4:	84 30       	cpi	r24, 0x04	; 4
  a6:	49 f1       	breq	.+82     	; 0xfa <convert_digit+0x5c>
  a8:	85 30       	cpi	r24, 0x05	; 5
  aa:	48 f4       	brcc	.+18     	; 0xbe <convert_digit+0x20>
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	c9 f0       	breq	.+50     	; 0xe2 <convert_digit+0x44>
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	98 f0       	brcs	.+38     	; 0xda <convert_digit+0x3c>
  b4:	82 30       	cpi	r24, 0x02	; 2
  b6:	c9 f0       	breq	.+50     	; 0xea <convert_digit+0x4c>
  b8:	83 30       	cpi	r24, 0x03	; 3
  ba:	b1 f5       	brne	.+108    	; 0x128 <convert_digit+0x8a>
  bc:	1a c0       	rjmp	.+52     	; 0xf2 <convert_digit+0x54>
  be:	87 30       	cpi	r24, 0x07	; 7
  c0:	41 f1       	breq	.+80     	; 0x112 <convert_digit+0x74>
  c2:	88 30       	cpi	r24, 0x08	; 8
  c4:	28 f4       	brcc	.+10     	; 0xd0 <convert_digit+0x32>
  c6:	85 30       	cpi	r24, 0x05	; 5
  c8:	e1 f0       	breq	.+56     	; 0x102 <convert_digit+0x64>
  ca:	86 30       	cpi	r24, 0x06	; 6
  cc:	69 f5       	brne	.+90     	; 0x128 <convert_digit+0x8a>
  ce:	1d c0       	rjmp	.+58     	; 0x10a <convert_digit+0x6c>
  d0:	88 30       	cpi	r24, 0x08	; 8
  d2:	19 f1       	breq	.+70     	; 0x11a <convert_digit+0x7c>
  d4:	89 30       	cpi	r24, 0x09	; 9
  d6:	41 f5       	brne	.+80     	; 0x128 <convert_digit+0x8a>
  d8:	24 c0       	rjmp	.+72     	; 0x122 <convert_digit+0x84>
	 case 0: PORTA |= 1<<A |1<<B |1<<C |1<<D |1<<E |1<<F ; break;
  da:	8b b3       	in	r24, 0x1b	; 27
  dc:	8e 67       	ori	r24, 0x7E	; 126
  de:	8b bb       	out	0x1b, r24	; 27
  e0:	08 95       	ret
	 case 1: PORTA |=  1<<E |1<<F  ; break;
  e2:	8b b3       	in	r24, 0x1b	; 27
  e4:	80 66       	ori	r24, 0x60	; 96
  e6:	8b bb       	out	0x1b, r24	; 27
  e8:	08 95       	ret
	 case 2: PORTA |= 1<<A |1<<B  |1<<D |1<<E  |1<<G ; break;
  ea:	8b b3       	in	r24, 0x1b	; 27
  ec:	86 6b       	ori	r24, 0xB6	; 182
  ee:	8b bb       	out	0x1b, r24	; 27
  f0:	08 95       	ret
	 case 3: PORTA |= 1<<A |1<<B |1<<C |1<<D  |1<<G ; break;
  f2:	8b b3       	in	r24, 0x1b	; 27
  f4:	8e 69       	ori	r24, 0x9E	; 158
  f6:	8b bb       	out	0x1b, r24	; 27
  f8:	08 95       	ret
	 case 4: PORTA |= 1<<B |1<<C |1<<F |1<<G ; break;
  fa:	8b b3       	in	r24, 0x1b	; 27
  fc:	8c 6c       	ori	r24, 0xCC	; 204
  fe:	8b bb       	out	0x1b, r24	; 27
 100:	08 95       	ret
	 case 5: PORTA |= 1<<A  |1<<C |1<<D  |1<<F |1<<G ; break;
 102:	8b b3       	in	r24, 0x1b	; 27
 104:	8a 6d       	ori	r24, 0xDA	; 218
 106:	8b bb       	out	0x1b, r24	; 27
 108:	08 95       	ret
	 case 6: PORTA |= 1<<A  |1<<C |1<<D |1<<E |1<<F |1<<G ; break;
 10a:	8b b3       	in	r24, 0x1b	; 27
 10c:	8a 6f       	ori	r24, 0xFA	; 250
 10e:	8b bb       	out	0x1b, r24	; 27
 110:	08 95       	ret
	 case 7: PORTA |= 1<<A |1<<B |1<<C ; break;  
 112:	8b b3       	in	r24, 0x1b	; 27
 114:	8e 60       	ori	r24, 0x0E	; 14
 116:	8b bb       	out	0x1b, r24	; 27
 118:	08 95       	ret
	 case 8: PORTA |= 1<<A |1<<B |1<<C |1<<D |1<<E |1<<F |1<<G ; break;
 11a:	8b b3       	in	r24, 0x1b	; 27
 11c:	8e 6f       	ori	r24, 0xFE	; 254
 11e:	8b bb       	out	0x1b, r24	; 27
 120:	08 95       	ret
	 case 9: PORTA |= 1<<A |1<<B |1<<C |1<<D  |1<<F |1<<G ; break;
 122:	8b b3       	in	r24, 0x1b	; 27
 124:	8e 6d       	ori	r24, 0xDE	; 222
 126:	8b bb       	out	0x1b, r24	; 27
 128:	08 95       	ret

0000012a <seven_seg_update>:
	 
 }	
}
void seven_seg_update(uint8_t counter){
 12a:	cf 93       	push	r28
	SETBIT(PORTC,7);
 12c:	af 9a       	sbi	0x15, 7	; 21
	CLRBIT(PORTC,6);
 12e:	ae 98       	cbi	0x15, 6	; 21
	uint8_t first_digit= counter / 10;
 130:	6a e0       	ldi	r22, 0x0A	; 10
 132:	0e 94 00 01 	call	0x200	; 0x200 <__udivmodqi4>
 136:	c9 2f       	mov	r28, r25
	convert_digit(first_digit);
 138:	0e 94 4f 00 	call	0x9e	; 0x9e <convert_digit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	8f e9       	ldi	r24, 0x9F	; 159
 13e:	9f e0       	ldi	r25, 0x0F	; 15
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <seven_seg_update+0x16>
 144:	00 c0       	rjmp	.+0      	; 0x146 <seven_seg_update+0x1c>
 146:	00 00       	nop
	_delay_ms(1);
	SETBIT(PORTC,6);
 148:	ae 9a       	sbi	0x15, 6	; 21
	CLRBIT(PORTC,7);
 14a:	af 98       	cbi	0x15, 7	; 21
	uint8_t second_digit= counter % 10;
	convert_digit(second_digit);
 14c:	8c 2f       	mov	r24, r28
 14e:	0e 94 4f 00 	call	0x9e	; 0x9e <convert_digit>
 152:	8f e9       	ldi	r24, 0x9F	; 159
 154:	9f e0       	ldi	r25, 0x0F	; 15
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <seven_seg_update+0x2c>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <seven_seg_update+0x32>
 15c:	00 00       	nop
	_delay_ms(1);
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <timer_normal_init>:
 *  Author: M
 */ 
#include "Timer0.h"

void timer_normal_init(){
	TCCR0= (1<<FOC0) | (1<<CS02) | (1<<CS00);
 162:	85 e8       	ldi	r24, 0x85	; 133
 164:	83 bf       	out	0x33, r24	; 51
	SETBIT(TIMSK,TOIE0);
 166:	89 b7       	in	r24, 0x39	; 57
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	89 bf       	out	0x39, r24	; 57
}
 16c:	08 95       	ret

0000016e <timer_compare_init>:
void timer_compare_init(){
	TCCR0= (1<<FOC0) | (1<<CS02) | (1<<CS00) | (1<<WGM01);
 16e:	8d e8       	ldi	r24, 0x8D	; 141
 170:	83 bf       	out	0x33, r24	; 51
	OCR0 =200;
 172:	88 ec       	ldi	r24, 0xC8	; 200
 174:	8c bf       	out	0x3c, r24	; 60
	SETBIT(TIMSK,OCIE0);
 176:	89 b7       	in	r24, 0x39	; 57
 178:	82 60       	ori	r24, 0x02	; 2
 17a:	89 bf       	out	0x39, r24	; 57
	
 17c:	08 95       	ret

0000017e <main>:
#include "Timer0.h"
uint8_t sec=20;
uint8_t led_color=0;
int main(void)
{
	SETBIT(DDRC,0);
 17e:	a0 9a       	sbi	0x14, 0	; 20
	SETBIT(DDRC,1);
 180:	a1 9a       	sbi	0x14, 1	; 20
	SETBIT(PORTC,0);
 182:	a8 9a       	sbi	0x15, 0	; 21
	CLRBIT(PORTC,1);
 184:	a9 98       	cbi	0x15, 1	; 21
	timer_normal_init();
 186:	0e 94 b1 00 	call	0x162	; 0x162 <timer_normal_init>
	seven_seg_init();
 18a:	0e 94 49 00 	call	0x92	; 0x92 <seven_seg_init>
	sei();
 18e:	78 94       	sei
	while(1)
    {
        seven_seg_update(sec);
 190:	80 91 60 00 	lds	r24, 0x0060
 194:	0e 94 95 00 	call	0x12a	; 0x12a <seven_seg_update>
		if (led_color==0){
 198:	80 91 62 00 	lds	r24, 0x0062
 19c:	88 23       	and	r24, r24
 19e:	19 f4       	brne	.+6      	; 0x1a6 <main+0x28>
			SETBIT(PORTC,1);
 1a0:	a9 9a       	sbi	0x15, 1	; 21
			CLRBIT(PORTC,0);
 1a2:	a8 98       	cbi	0x15, 0	; 21
 1a4:	f5 cf       	rjmp	.-22     	; 0x190 <main+0x12>
			}
		else if (led_color==1){
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	99 f7       	brne	.-26     	; 0x190 <main+0x12>
			SETBIT(PORTC,0);
 1aa:	a8 9a       	sbi	0x15, 0	; 21
			CLRBIT(PORTC,1);
 1ac:	a9 98       	cbi	0x15, 1	; 21
 1ae:	f0 cf       	rjmp	.-32     	; 0x190 <main+0x12>

000001b0 <__vector_11>:
			}
    }
}
ISR(TIMER0_OVF_vect){
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
	static uint8_t counter=0;
	counter++;
 1be:	80 91 63 00 	lds	r24, 0x0063
 1c2:	8f 5f       	subi	r24, 0xFF	; 255
 1c4:	80 93 63 00 	sts	0x0063, r24
	if(counter==62){
 1c8:	8e 33       	cpi	r24, 0x3E	; 62
 1ca:	99 f4       	brne	.+38     	; 0x1f2 <__vector_11+0x42>
		if (sec!=0){
 1cc:	80 91 60 00 	lds	r24, 0x0060
 1d0:	88 23       	and	r24, r24
 1d2:	21 f0       	breq	.+8      	; 0x1dc <__vector_11+0x2c>
		sec--;
 1d4:	81 50       	subi	r24, 0x01	; 1
 1d6:	80 93 60 00 	sts	0x0060, r24
 1da:	09 c0       	rjmp	.+18     	; 0x1ee <__vector_11+0x3e>
		}
		else if (sec==0){
			TOGBIT(led_color,0);
 1dc:	90 91 62 00 	lds	r25, 0x0062
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	89 27       	eor	r24, r25
 1e4:	80 93 62 00 	sts	0x0062, r24
			sec=20;
 1e8:	84 e1       	ldi	r24, 0x14	; 20
 1ea:	80 93 60 00 	sts	0x0060, r24
			}		
	counter=0;	
 1ee:	10 92 63 00 	sts	0x0063, r1
	}
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <__udivmodqi4>:
 200:	99 1b       	sub	r25, r25
 202:	79 e0       	ldi	r23, 0x09	; 9
 204:	04 c0       	rjmp	.+8      	; 0x20e <__udivmodqi4_ep>

00000206 <__udivmodqi4_loop>:
 206:	99 1f       	adc	r25, r25
 208:	96 17       	cp	r25, r22
 20a:	08 f0       	brcs	.+2      	; 0x20e <__udivmodqi4_ep>
 20c:	96 1b       	sub	r25, r22

0000020e <__udivmodqi4_ep>:
 20e:	88 1f       	adc	r24, r24
 210:	7a 95       	dec	r23
 212:	c9 f7       	brne	.-14     	; 0x206 <__udivmodqi4_loop>
 214:	80 95       	com	r24
 216:	08 95       	ret

00000218 <_exit>:
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>
